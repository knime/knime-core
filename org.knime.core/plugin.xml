<?xml version="1.0" encoding="UTF-8"?>
<?eclipse version="3.0"?>
<plugin>
   <extension-point id="NodeExecutionJobManagerFactory" name="NodeExecutionJobManagerFactory" schema="schema/org.knime.core.NodeExecutionJobManagerFactory.exsd"/>
   <extension-point id="JDBCDriver" name="JDBCDriver" schema="schema/JDBCDriver.exsd"/>
   <extension-point id="DataValueRenderer" name="DataValueRenderer" schema="schema/DataValueRenderer.exsd"/>
   <extension-point id="NodeFactoryClassMapper" name="Changes NodeFactory class names in saved workflows" schema="schema/NodeFactoryClassMapper.exsd"/>
   <extension-point id="DatabaseUtility" name="DatabaseUtility" schema="schema/DatabaseUtility.exsd"/>
   <extension-point id="WizardNodeView" name="WizardNodeView" schema="schema/WizardNodeView.exsd"/>
   <extension-point id="DataType" name="DataType" schema="schema/DataType.exsd"/>
   <extension-point id="PortType" name="PortType" schema="schema/PortType.exsd"/>
   <extension-point id="EarlyStartup" name="EarlyStartup" schema="schema/EarlyStartup.exsd"/>
   <extension-point id="TableFormat" name="TableFormat" schema="schema/TableFormat.exsd"/>
   <extension-point id="ExtensionTable" name="ExtensionTable" schema="schema/ExtensionTable.exsd"/>
   <extension-point id="TableBackend" name="TableBackend" schema="schema/TableBackend.exsd"/>
   <extension-point id="JavaToDataCellConverter" name="JavaToDataCellConverter" schema="schema/JavaToDataCellConverter.exsd"/>
   <extension-point id="DataCellToJavaConverter" name="DataCellToJavaConverter" schema="schema/DataCellToJavaConverter.exsd"/>
   <extension-point id="WorkflowSaveHook" name="Extensions that are run after a workflow is saved to disc" schema="schema/WorkflowSaveHook.exsd"/>
   <extension-point id="FileSystemBrowser" name="FileSystemBrowser" schema="schema/FileSystemBrowser.exsd"/>
   <extension-point id="DataColumnMetaDataType" name="DataColumnMetaDataType" schema="schema/DataColumnMetaDataType.exsd"/>
   <extension-point id="FlowVariableType" name="FlowVariableType" schema="schema/FlowVariableType.exsd"/>
   <extension-point id="ImageContentFactory" name="Contributes custom image content to an image port object (NO public API)" schema="schema/ImageContentFactory.exsd"/>
   <extension-point id="RpcTransportFactory" name="RpcTransportFactory" schema="schema/RpcTransportFactory.exsd"/>
   <extension-point id="PortTypeClassMapper" name="PortTypeClassMapper" schema="schema/PortTypeClassMapper.exsd"/>
   <extension point="org.knime.core.NodeExecutionJobManagerFactory">
      <NodeExecutionJobManagerFactory JobManagerFactory="org.knime.core.node.exec.ThreadNodeExecutionJobManagerFactory"/>
      <NodeExecutionJobManagerFactory JobManagerFactory="org.knime.core.node.exec.ThreadComponentExecutionJobManagerFactory"/>
   </extension>
   <extension
         point="org.knime.core.DataValueRenderer">
      <dataValue
            valueClass="org.knime.core.data.IntValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.IntValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.LongValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.IntValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.StringValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.StringValueRenderer$Factory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.MultiLineStringValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.blob.BinaryObjectDataValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.blob.BinaryObjectDataValueRenderer$ShortHexdumpFactory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.blob.BinaryObjectDataValueRenderer$LongHexdumpFactory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.blob.BinaryObjectDataValueMetaRenderer$Factory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.vector.bitvector.BitVectorValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.BitVectorValueStringRenderer$HexRendererFactory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.BitVectorValueStringRenderer$BinRendererFactory"
               suggestAsDefault="true">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.BitVectorValuePixelRenderer$Factory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.BitVectorValueStringRenderer$SetBitsRendererFactory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.vector.bitvector.SparseBitVectorValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.BitVectorValueStringRenderer$HexRendererFactory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.BitVectorValueStringRenderer$BinRendererFactory"
               suggestAsDefault="true">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.BitVectorValuePixelRenderer$Factory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.BitVectorValueStringRenderer$SetBitsRendererFactory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.BooleanValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.BooleanValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.vector.bytevector.ByteVectorValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.ByteVectorValueStringRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.ByteVectorValuePixelRenderer$Factory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.collection.CollectionDataValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.collection.CollectionValueRenderer$ShortRendererFactory"
               suggestAsDefault="true">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.collection.CollectionValueRenderer$FullRendererFactory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.collection.ListDataValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.collection.CollectionValueRenderer$ShortRendererFactory"
               suggestAsDefault="true">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.collection.CollectionValueRenderer$FullRendererFactory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.collection.SetDataValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.collection.CollectionValueRenderer$ShortRendererFactory"
               suggestAsDefault="true">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.collection.CollectionValueRenderer$FullRendererFactory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.image.png.PNGImageValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.image.png.PNGImageValueRendererFactoryUtil$StandardRendererFactory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.ComplexNumberValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.ComplexNumberValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.date.DateAndTimeValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.date.DateAndTimeValueRenderer$UsRendererFactory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.date.DateAndTimeValueRenderer$DefaultRendererFactory"
               suggestAsDefault="true">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.date.DateAndTimeValueRenderer$Iso8061RendererFactory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.DoubleValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.DoubleValueRenderer$StandardRendererFactory"
               suggestAsDefault="true">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.DoubleValueRenderer$FullPrecisionRendererFactory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.DoubleValueRenderer$PercentageRendererFactory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.DoubleGrayValueRenderer$Factory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.DoubleBarRenderer$Factory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.vector.doublevector.DoubleVectorValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.DoubleVectorValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.vector.stringvector.StringVectorValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.StringVectorValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.FuzzyIntervalValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.DefaultDataValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.FuzzyNumberValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.DefaultDataValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.IntervalValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.DefaultDataValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.model.PortObjectValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.model.PortObjectValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.xml.XMLValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.xml.XMLValueRenderer2$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.xml.PMMLValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.xml.XMLValueRenderer$Factory"
               suggestAsDefault="true">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.image.ImageValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.renderer.ImageValueRenderer$Factory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>
      <dataValue
            valueClass="org.knime.core.data.probability.nominal.NominalDistributionValue">
         <renderer
               rendererFactoryClass="org.knime.core.data.probability.nominal.renderer.NominalDistributionClassNameRenderer$ClassNameRendererFactory"
               suggestAsDefault="true">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.probability.nominal.renderer.NominalDistributionMajorityClassRenderer$MajorityClassRendererFactory"
               suggestAsDefault="false">
         </renderer>
         <renderer
               rendererFactoryClass="org.knime.core.data.probability.nominal.renderer.NominalDistributionBarChartRenderer$BarChartRendererFactory"
               suggestAsDefault="false">
         </renderer>
      </dataValue>      
   </extension>
   <extension
         point="org.knime.core.DatabaseUtility">
      <databaseUtility
            class="org.knime.core.node.port.database.OracleUtility"
            database="oracle">
      </databaseUtility>
      <databaseUtility
            class="org.knime.core.node.port.database.DB2Utility"
            database="db2">
      </databaseUtility>
   </extension>
   <extension
         point="org.knime.core.DataType">
      <DataType
            cellClass="org.knime.core.data.def.IntCell"
            factoryClass="org.knime.core.data.def.IntCell$IntCellFactory">
         <serializer
               cellClass="org.knime.core.data.def.IntCell"
               serializerClass="org.knime.core.data.def.IntCell$IntCellSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.IntValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.def.DoubleCell"
            factoryClass="org.knime.core.data.def.DoubleCell$DoubleCellFactory">
         <serializer
               cellClass="org.knime.core.data.def.DoubleCell"
               serializerClass="org.knime.core.data.def.DoubleCell$DoubleSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.DoubleValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.vector.doublevector.DenseDoubleVectorCell"
            factoryClass="org.knime.core.data.vector.doublevector.DoubleVectorCellFactory">
         <serializer
               cellClass="org.knime.core.data.vector.doublevector.DenseDoubleVectorCell"
               serializerClass="org.knime.core.data.vector.doublevector.DenseDoubleVectorCell$DenseDoubleVectorSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.vector.stringvector.DenseStringVectorCell"
            factoryClass="org.knime.core.data.vector.stringvector.StringVectorCellFactory">
         <serializer
               cellClass="org.knime.core.data.vector.stringvector.DenseStringVectorCell"
               serializerClass="org.knime.core.data.vector.stringvector.DenseStringVectorCell$DenseStringVectorSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.date.DateAndTimeCell">
         <serializer
               cellClass="org.knime.core.data.date.DateAndTimeCell"
               serializerClass="org.knime.core.data.date.DateAndTimeCellSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.def.BooleanCell"
            factoryClass="org.knime.core.data.def.BooleanCell$BooleanCellFactory">
         <serializer
               cellClass="org.knime.core.data.def.BooleanCell"
               serializerClass="org.knime.core.data.def.BooleanCell$BooleanSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.BooleanValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.def.ComplexNumberCell">
         <serializer
               cellClass="org.knime.core.data.def.ComplexNumberCell"
               serializerClass="org.knime.core.data.def.ComplexNumberCell$ComplexNumberSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.def.FuzzyIntervalCell">
         <serializer
               cellClass="org.knime.core.data.def.FuzzyIntervalCell"
               serializerClass="org.knime.core.data.def.FuzzyIntervalCell$FuzzyIntervalSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.def.LongCell"
            factoryClass="org.knime.core.data.def.LongCell$LongCellFactory">
         <serializer
               cellClass="org.knime.core.data.def.LongCell"
               serializerClass="org.knime.core.data.def.LongCell$LongSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.LongValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.def.IntervalCell">
         <serializer
               cellClass="org.knime.core.data.def.IntervalCell"
               serializerClass="org.knime.core.data.def.IntervalCell$IntervalSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.def.FuzzyNumberCell">
         <serializer
               cellClass="org.knime.core.data.def.FuzzyNumberCell"
               serializerClass="org.knime.core.data.def.FuzzyNumberCell$FuzzyNumberSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.MissingCell">
         <serializer
               cellClass="org.knime.core.data.MissingCell"
               serializerClass="org.knime.core.data.MissingCell$MissingSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.UnmaterializedCell">
         <serializer
               cellClass="org.knime.core.data.UnmaterializedCell"
               serializerClass="org.knime.core.data.UnmaterializedCell$UnmaterializedSerializer">
         </serializer>
      </DataType>
     
      <DataType
            cellClass="org.knime.core.data.vector.bitvector.SparseBitVectorCell"
            factoryClass="org.knime.core.data.vector.bitvector.SparseBitVectorCell$Factory">
         <serializer
               cellClass="org.knime.core.data.vector.bitvector.SparseBitVectorCell"
               serializerClass="org.knime.core.data.vector.bitvector.SparseBitVectorCell$SparseBitVectorSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.vector.bitvector.DenseBitVectorCell"
            factoryClass="org.knime.core.data.vector.bitvector.DenseBitVectorCell$Factory">
         <serializer
               cellClass="org.knime.core.data.vector.bitvector.DenseBitVectorCell"
               serializerClass="org.knime.core.data.vector.bitvector.DenseBitVectorCell$DenseBitVectorSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.DenseBitVectorValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.xml.XMLCell"
            factoryClass="org.knime.core.data.xml.XMLCellFactory">
         <serializer
               cellClass="org.knime.core.data.xml.XMLCell"
               serializerClass="org.knime.core.data.xml.XMLCell$XMLSerializer">
         </serializer>
         <serializer
               cellClass="org.knime.core.data.xml.XMLBlobCell"
               serializerClass="org.knime.core.data.xml.XMLBlobCell$XMLSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.image.png.PNGImageCell"
            factoryClass="org.knime.core.data.image.png.PNGImageCellFactory">
         <serializer
               cellClass="org.knime.core.data.image.png.PNGImageCell"
               serializerClass="org.knime.core.data.image.png.PNGImageCell$PNGSerializer">
         </serializer>
         <serializer
               cellClass="org.knime.core.data.image.png.PNGImageBlobCell"
               serializerClass="org.knime.core.data.image.png.PNGImageBlobCell$PNGSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.blob.BinaryObjectDataCell"
            factoryClass="org.knime.core.data.blob.BinaryObjectCellFactory">
         <serializer
               cellClass="org.knime.core.data.blob.BinaryObjectDataCell"
               serializerClass="org.knime.core.data.blob.BinaryObjectDataCell$BinaryObjectCellSerializer">
         </serializer>
         <serializer
               cellClass="org.knime.core.data.blob.BinaryObjectFileStoreDataCell"
               serializerClass="org.knime.core.data.blob.BinaryObjectFileStoreDataCell$BinaryObjectFileStoreCellSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.xml.PMMLCell"
            factoryClass="org.knime.core.data.xml.PMMLCellFactory">
         <serializer
               cellClass="org.knime.core.data.xml.PMMLCell"
               serializerClass="org.knime.core.data.xml.PMMLCell$PMMLSerializer">
         </serializer>
         <serializer
               cellClass="org.knime.core.data.xml.PMMLBlobCell"
               serializerClass="org.knime.core.data.xml.PMMLBlobCell$PMMLSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.vector.bytevector.DenseByteVectorCell"
            factoryClass="org.knime.core.data.vector.bytevector.DenseByteVectorCell$Factory">
         <serializer
               cellClass="org.knime.core.data.vector.bytevector.DenseByteVectorCell"
               serializerClass="org.knime.core.data.vector.bytevector.DenseByteVectorCell$DenseByteVectorSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.DenseByteVectorValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.vector.bytevector.SparseByteVectorCell">
         <serializer
               cellClass="org.knime.core.data.vector.bytevector.SparseByteVectorCell"
               serializerClass="org.knime.core.data.vector.bytevector.SparseByteVectorCell$SparseByteVectorSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.filestore.internal.FileStoreKeyDataCell">
         <serializer
               cellClass="org.knime.core.data.filestore.internal.FileStoreKeyDataCell"
               serializerClass="org.knime.core.data.filestore.internal.FileStoreKeyDataCell$FileStoreKeyCellSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.collection.ListCell">
         <serializer
               cellClass="org.knime.core.data.collection.ListCell"
               serializerClass="org.knime.core.data.collection.ListCell$ListCellSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.ListValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.collection.SparseListCell">
         <serializer
               cellClass="org.knime.core.data.collection.SparseListCell"
               serializerClass="org.knime.core.data.collection.SparseListCell$SparseListCellSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.SparseListValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.collection.SetCell">
         <serializer
               cellClass="org.knime.core.data.collection.SetCell"
               serializerClass="org.knime.core.data.collection.SetCell$SetCellSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.SetValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.model.PortObjectCell">
         <serializer
               cellClass="org.knime.core.data.model.PortObjectCell"
               serializerClass="org.knime.core.data.model.PortObjectCell$PortObjectCellSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.PortObjectValueFactory">
         </ValueFactory>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.def.TimestampCell">
         <serializer
               cellClass="org.knime.core.data.def.TimestampCell"
               serializerClass="org.knime.core.data.def.TimestampCell$TimestampCellSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.xml.PMMLCell"
            factoryClass="org.knime.core.data.xml.PMMLCellFactory">
         <serializer
               cellClass="org.knime.core.data.xml.PMMLCell"
               serializerClass="org.knime.core.data.xml.PMMLCell$PMMLSerializer">
         </serializer>
         <serializer
               cellClass="org.knime.core.data.xml.PMMLBlobCell"
               serializerClass="org.knime.core.data.xml.PMMLBlobCell$PMMLSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.probability.nominal.NominalDistributionCell">
         <serializer
               cellClass="org.knime.core.data.probability.nominal.NominalDistributionCell"
               serializerClass="org.knime.core.data.probability.nominal.NominalDistributionCell$NominalDistributionSerializer">
         </serializer>
      </DataType>
      <DataType
            cellClass="org.knime.core.data.def.StringCell"
            factoryClass="org.knime.core.data.def.StringCell$StringCellFactory">
         <serializer
               cellClass="org.knime.core.data.def.StringCell"
               serializerClass="org.knime.core.data.def.StringCell$StringSerializer">
         </serializer>
         <ValueFactory
               deprecated="false"
               valueFactoryClass="org.knime.core.data.v2.value.StringValueFactory">
         </ValueFactory>
      </DataType>
   </extension>
   <extension
         point="org.knime.core.PortType">
      <portType
            color="#41be78"
            name="Image"
            objectClass="org.knime.core.node.port.image.ImagePortObject"
            objectSerializer="org.knime.core.node.port.image.ImagePortObject$Serializer"
            specClass="org.knime.core.node.port.image.ImagePortObjectSpec"
            specSerializer="org.knime.core.node.port.image.ImagePortObjectSpec$Serializer">
      </portType>
      <portType
            hidden="true"
            name="PMML Preprocessing"
            objectClass="org.knime.core.node.port.pmml.preproc.PMMLPreprocPortObject"
            objectSerializer="org.knime.core.node.port.pmml.preproc.PMMLPreprocPortObject$Serializer"
            specClass="org.knime.core.node.port.pmml.preproc.PMMLPreprocPortObjectSpec"
            specSerializer="org.knime.core.node.port.pmml.preproc.PMMLPreprocPortObjectSpec$Serializer">
      </portType>
      <portType
            hidden="false"
            color="#1eb9dc"
            name="Color"
            objectClass="org.knime.core.node.port.viewproperty.ColorHandlerPortObject"
            objectSerializer="org.knime.core.node.port.viewproperty.ColorHandlerPortObject$Serializer"
            specClass="org.knime.core.data.DataTableSpec">
      </portType>
      <portType
            hidden="true"
            color="#1eb9dc"
            name="Size"
            objectClass="org.knime.core.node.port.viewproperty.SizeHandlerPortObject"
            objectSerializer="org.knime.core.node.port.viewproperty.SizeHandlerPortObject$Serializer"
            specClass="org.knime.core.data.DataTableSpec">
      </portType>
      <portType
            hidden="true"
            color="#1eb9dc"
            name="Shape"
            objectClass="org.knime.core.node.port.viewproperty.ShapeHandlerPortObject"
            objectSerializer="org.knime.core.node.port.viewproperty.ShapeHandlerPortObject$Serializer"
            specClass="org.knime.core.data.DataTableSpec">
      </portType>
      <portType
            color="#1eb9dc"
            hidden="false"
            name="FilterDefinition"
            objectClass="org.knime.core.node.port.viewproperty.FilterDefinitionHandlerPortObject"
            objectSerializer="org.knime.core.node.port.viewproperty.FilterDefinitionHandlerPortObject$Serializer"
            specClass="org.knime.core.data.DataTableSpec">
      </portType>
      <portType
            color="#ff4b4b"
            name="Database Connection"
            objectClass="org.knime.core.node.port.database.DatabaseConnectionPortObject"
            objectSerializer="org.knime.core.node.port.database.DatabaseConnectionPortObject$Serializer"
            specClass="org.knime.core.node.port.database.DatabaseConnectionPortObjectSpec"
            specSerializer="org.knime.core.node.port.database.DatabaseConnectionPortObjectSpec$Serializer">
      </portType>
      <portType
            hidden="true"
            name="Inactive branch"
            objectClass="org.knime.core.node.port.inactive.InactiveBranchPortObject"
            objectSerializer="org.knime.core.node.port.inactive.InactiveBranchPortObject$Serializer"
            specClass="org.knime.core.node.port.inactive.InactiveBranchPortObjectSpec"
            specSerializer="org.knime.core.node.port.inactive.InactiveBranchPortObjectSpec$Serializer">
      </portType>
      <portType
            color="#ff4b4b"
            name="Flow Variable"
            objectClass="org.knime.core.node.port.flowvariable.FlowVariablePortObject"
            objectSerializer="org.knime.core.node.port.flowvariable.FlowVariablePortObject$Serializer"
            specClass="org.knime.core.node.port.flowvariable.FlowVariablePortObjectSpec"
            specSerializer="org.knime.core.node.port.flowvariable.FlowVariablePortObjectSpec$Serializer">
      </portType>
      <portType
            color="#800000"
            name="Database Query"
            objectClass="org.knime.core.node.port.database.DatabasePortObject"
            objectSerializer="org.knime.core.node.port.database.DatabasePortObject$Serializer"
            specClass="org.knime.core.node.port.database.DatabasePortObjectSpec"
            specSerializer="org.knime.core.node.port.database.DatabasePortObjectSpec$Serializer">
      </portType>
      <portType
            color="#1469af"
            hidden="false"
            name="PMML"
            objectClass="org.knime.core.node.port.pmml.PMMLPortObject"
            objectSerializer="org.knime.core.node.port.pmml.PMMLPortObjectSerializer"
            specClass="org.knime.core.node.port.pmml.PMMLPortObjectSpec"
            specSerializer="org.knime.core.node.port.pmml.PMMLPortObjectSpecSerializer">
      </portType>
      <portType
            color="#000000"
            hidden="false"
            name="Workflow Port Object"
            objectClass="org.knime.core.node.workflow.capture.WorkflowPortObject"
            objectSerializer="org.knime.core.node.workflow.capture.WorkflowPortObject$Serializer"
            specClass="org.knime.core.node.workflow.capture.WorkflowPortObjectSpec"
            specSerializer="org.knime.core.node.workflow.capture.WorkflowPortObjectSpec$Serializer">
      </portType>
   </extension>
   <extension
         point="org.knime.core.TableFormat">
      <TableFormat
            formatDefinition="org.knime.core.data.container.DefaultTableStoreFormat">
      </TableFormat>
   </extension>
   <extension
         point="org.knime.core.DataCellToJavaConverter">
      <DataCellToJavaConverter
            factoryClass="org.knime.core.data.vector.bytevector.ByteVectorValueToIntStreamConverterFactory">
      </DataCellToJavaConverter>
      <DataCellToJavaConverter
            factoryClass="org.knime.core.data.vector.bytevector.ByteVectorValueToPrimitiveIntArrayConverterFactory">
      </DataCellToJavaConverter>
   </extension>
   <extension
         point="org.knime.core.JavaToDataCellConverter">
      <JavaToDataCellConverter
            factoryClass="org.knime.core.data.vector.bytevector.IntStreamToDenseByteVectorCellConverter">
      </JavaToDataCellConverter>
      <JavaToDataCellConverter
            factoryClass="org.knime.core.data.vector.bytevector.IntArrayToDenseByteVectorCellConverter">
      </JavaToDataCellConverter>
   </extension>
   <extension
         point="org.knime.core.WorkflowSaveHook">
      <WorkflowSaveHook
            class="org.knime.core.openapi.OpenAPIDefinitionGenerator">
      </WorkflowSaveHook>
      <WorkflowSaveHook
            class="org.knime.core.node.workflow.artifacts.WorkflowConfigArtifactsGenerator">
      </WorkflowSaveHook>
   </extension>
   <extension
         point="org.knime.core.DataColumnMetaDataType">
      <DataColumnMetaData
            dataColumnMetaDataExtension="org.knime.core.data.probability.nominal.NominalDistributionValueMetaDataExtension">
      </DataColumnMetaData>
   </extension>
   <extension
         point="org.knime.workbench.repository.nodesets">
      <nodeset
            deprecated="false"
            factory-class="org.knime.core.node.workflow.virtual.VirtualNodeSetFactory">
      </nodeset>
   </extension>
   <extension
         point="org.knime.workbench.repository.nodes">
      <node
            deprecated="false"
            factory-class="org.knime.core.node.exec.dataexchange.in.BDTInNodeFactory"
            hidden="true">
      </node>
      <node
            deprecated="false"
            factory-class="org.knime.core.node.exec.dataexchange.in.PortObjectInNodeFactory"
            hidden="true">
      </node>
   </extension>
   <extension
         point="org.knime.core.TableBackend">
      <TableBackend
            backend="org.knime.core.data.container.BufferedTableBackend">
      </TableBackend>
   </extension>
</plugin>
