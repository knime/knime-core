<?xml version="1.0" encoding="UTF-8"?>
<!--
  ===============================================================================
 *  Copyright by KNIME AG, Zurich, Switzerland
 *  Website: http://www.knime.com; Email: contact@knime.com
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME AG herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
  ===============================================================================
  
  This XSD is generated from Node1xx.dtd and describes node description prior to KNIME 2.0.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" xmlns="http://knime.org/node/v1.3"
    targetNamespace="http://knime.org/node/v1.3">
  <xs:element name="knimeNode">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="name"/>
        <xs:element ref="shortDescription"/>
        <xs:element ref="fullDescription"/>
        <xs:element ref="ports"/>
        <xs:element minOccurs="0" ref="views"/>
      </xs:sequence>
      <xs:attribute name="icon" type="xs:string"/>
      <xs:attribute name="type" default="Unknown">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="Source"/>
            <xs:enumeration value="Sink"/>
            <xs:enumeration value="Learner"/>
            <xs:enumeration value="Predictor"/>
            <xs:enumeration value="Manipulator"/>
            <xs:enumeration value="Visualizer"/>
            <xs:enumeration value="Meta"/>
            <xs:enumeration value="Other"/>
            <xs:enumeration value="Unknown"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="deprecated" default="false" type="xs:boolean" />
    </xs:complexType>
  </xs:element>
  <xs:element name="name" type="xs:string"/>
  <xs:element name="shortDescription" type="xs:string"/>
  <xs:element name="fullDescription">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="intro"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="option"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="intro">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="p"/>
        <xs:element ref="h"/>
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="a"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
        <xs:element ref="h3"/>
        <xs:element ref="h4"/>
        <xs:element ref="pre"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="option">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="p"/>
        <xs:element ref="h"/>
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="tt"/>
        <xs:element ref="a"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
        <xs:element ref="pre"/>
      </xs:choice>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="p">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="a"/>
        <xs:element ref="tt"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="ul">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="li"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ol">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="li"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="li" type="xs:string"/>
  <xs:element name="h3" type="xs:string"/>
  <xs:element name="h4" type="xs:string"/>
  <xs:element name="h" type="xs:string"/>
  <xs:element name="b" type="xs:string"/>
  <xs:element name="i" type="xs:string"/>
  <xs:element name="u" type="xs:string"/>
  <xs:element name="a">
    <xs:complexType mixed="true">
      <xs:attribute name="href" use="required"  type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="tt" type="xs:string"/>
  <xs:element name="pre" type="xs:string"/>
  <xs:element name="br">
    <xs:complexType/>
  </xs:element>
  <xs:element name="ports">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="dataIn"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="dataOut"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="predParamIn"/>
          <xs:element ref="modelIn"/>
        </xs:choice>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="predParamOut"/>
          <xs:element ref="modelOut"/>
        </xs:choice>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="dataIn">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="tt"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
      </xs:choice>
      <xs:attribute name="index" use="required" type="xs:nonNegativeInteger"/>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="dataOut">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="tt"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
      </xs:choice>
      <xs:attribute name="index" use="required" type="xs:nonNegativeInteger"/>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="predParamIn">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="tt"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
      </xs:choice>
      <xs:attribute name="index" use="required" type="xs:nonNegativeInteger"/>
      <xs:attribute name="name" use="required" type="xs:string"/>
      <xs:attribute name="type" default="default"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="predParamOut">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="tt"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
      </xs:choice>
      <xs:attribute name="index" use="required" type="xs:nonNegativeInteger"/>
      <xs:attribute name="name" use="required" type="xs:string"/>
      <xs:attribute name="type" default="default"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="modelIn">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="tt"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
      </xs:choice>
      <xs:attribute name="index" use="required" type="xs:nonNegativeInteger"/>
      <xs:attribute name="name" use="required" type="xs:string"/>
      <xs:attribute name="type" default="default"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="modelOut">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="tt"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
      </xs:choice>
      <xs:attribute name="index" use="required" type="xs:nonNegativeInteger"/>
      <xs:attribute name="name" use="required" type="xs:string"/>
      <xs:attribute name="type" default="default"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="views">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="view"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="view">
    <xs:complexType mixed="true">
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="br"/>
        <xs:element ref="b"/>
        <xs:element ref="i"/>
        <xs:element ref="u"/>
        <xs:element ref="a"/>
        <xs:element ref="tt"/>
        <xs:element ref="ul"/>
        <xs:element ref="ol"/>
      </xs:choice>
      <xs:attribute name="index" use="required" type="xs:nonNegativeInteger"/>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
